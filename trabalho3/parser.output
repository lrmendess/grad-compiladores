Grammar

    0 $accept: program $end

    1 program: funcDeclList

    2 funcDeclList: funcDeclList funcDecl
    3             | funcDecl

    4 funcDecl: funcHeader funcBody

    5 funcHeader: retType ID LPAREN params RPAREN

    6 funcBody: LBRACE optVarDecl optStmtList RBRACE

    7 optVarDecl: %empty
    8           | varDeclList

    9 optStmtList: %empty
   10            | stmtList

   11 retType: INT
   12        | VOID

   13 params: VOID
   14       | paramList

   15 paramList: paramList COMMA param
   16          | param

   17 param: INT ID
   18      | INT ID LBRACK RBRACK

   19 varDeclList: varDeclList varDecl
   20            | varDecl

   21 varDecl: INT ID SEMI
   22        | INT ID LBRACK NUM RBRACK SEMI

   23 stmtList: stmtList stmt
   24         | stmt

   25 stmt: assignStmt
   26     | ifStmt
   27     | whileStmt
   28     | returnStmt
   29     | funcCall SEMI

   30 assignStmt: lval ASSIGN arithExpr SEMI

   31 lval: ID
   32     | ID LBRACK NUM RBRACK
   33     | ID LBRACK ID RBRACK

   34 ifStmt: IF LPAREN boolExpr RPAREN block
   35       | IF LPAREN boolExpr RPAREN block ELSE block

   36 block: LBRACE optStmtList RBRACE

   37 whileStmt: WHILE LPAREN boolExpr RPAREN block

   38 returnStmt: RETURN SEMI
   39           | RETURN arithExpr SEMI

   40 funcCall: outputCall
   41         | writeCall
   42         | userFuncCall

   43 inputCall: INPUT LPAREN RPAREN

   44 outputCall: OUTPUT LPAREN arithExpr RPAREN

   45 writeCall: WRITE LPAREN STRING RPAREN

   46 userFuncCall: ID LPAREN optArgList RPAREN

   47 optArgList: %empty
   48           | argList

   49 argList: argList COMMA arithExpr
   50        | arithExpr

   51 boolExpr: arithExpr LT arithExpr
   52         | arithExpr LE arithExpr
   53         | arithExpr GT arithExpr
   54         | arithExpr GE arithExpr
   55         | arithExpr EQ arithExpr
   56         | arithExpr NEQ arithExpr

   57 arithExpr: arithExpr PLUS arithExpr
   58          | arithExpr MINUS arithExpr
   59          | arithExpr TIMES arithExpr
   60          | arithExpr OVER arithExpr
   61          | LPAREN arithExpr RPAREN
   62          | lval
   63          | inputCall
   64          | userFuncCall
   65          | NUM


Terminals, with rules where they appear

$end (0) 0
error (256)
ELSE (258) 35
IF (259) 34 35
INPUT (260) 43
INT (261) 11 17 18 21 22
OUTPUT (262) 44
RETURN (263) 38 39
VOID (264) 12 13
WHILE (265) 37
WRITE (266) 45
SEMI (267) 21 22 29 30 38 39
COMMA (268) 15 49
LBRACK (269) 18 22 32 33
RBRACK (270) 18 22 32 33
LBRACE (271) 6 36
RBRACE (272) 6 36
LPAREN (273) 5 34 35 37 43 44 45 46 61
RPAREN (274) 5 34 35 37 43 44 45 46 61
NUM (275) 22 32 65
ID (276) 5 17 18 21 22 31 32 33 46
STRING (277) 45
LT (278) 51
LE (279) 52
GT (280) 53
GE (281) 54
EQ (282) 55
NEQ (283) 56
PLUS (284) 57
MINUS (285) 58
TIMES (286) 59
OVER (287) 60
ASSIGN (288) 30


Nonterminals, with rules where they appear

$accept (34)
    on left: 0
program (35)
    on left: 1, on right: 0
funcDeclList (36)
    on left: 2 3, on right: 1 2
funcDecl (37)
    on left: 4, on right: 2 3
funcHeader (38)
    on left: 5, on right: 4
funcBody (39)
    on left: 6, on right: 4
optVarDecl (40)
    on left: 7 8, on right: 6
optStmtList (41)
    on left: 9 10, on right: 6 36
retType (42)
    on left: 11 12, on right: 5
params (43)
    on left: 13 14, on right: 5
paramList (44)
    on left: 15 16, on right: 14 15
param (45)
    on left: 17 18, on right: 15 16
varDeclList (46)
    on left: 19 20, on right: 8 19
varDecl (47)
    on left: 21 22, on right: 19 20
stmtList (48)
    on left: 23 24, on right: 10 23
stmt (49)
    on left: 25 26 27 28 29, on right: 23 24
assignStmt (50)
    on left: 30, on right: 25
lval (51)
    on left: 31 32 33, on right: 30 62
ifStmt (52)
    on left: 34 35, on right: 26
block (53)
    on left: 36, on right: 34 35 37
whileStmt (54)
    on left: 37, on right: 27
returnStmt (55)
    on left: 38 39, on right: 28
funcCall (56)
    on left: 40 41 42, on right: 29
inputCall (57)
    on left: 43, on right: 63
outputCall (58)
    on left: 44, on right: 40
writeCall (59)
    on left: 45, on right: 41
userFuncCall (60)
    on left: 46, on right: 42 64
optArgList (61)
    on left: 47 48, on right: 46
argList (62)
    on left: 49 50, on right: 48 49
boolExpr (63)
    on left: 51 52 53 54 55 56, on right: 34 35 37
arithExpr (64)
    on left: 57 58 59 60 61 62 63 64 65, on right: 30 39 44 49 50 51
    52 53 54 55 56 57 58 59 60 61


State 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    program       go to state 3
    funcDeclList  go to state 4
    funcDecl      go to state 5
    funcHeader    go to state 6
    retType       go to state 7


State 1

   11 retType: INT .

    $default  reduce using rule 11 (retType)


State 2

   12 retType: VOID .

    $default  reduce using rule 12 (retType)


State 3

    0 $accept: program . $end

    $end  shift, and go to state 8


State 4

    1 program: funcDeclList .
    2 funcDeclList: funcDeclList . funcDecl

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 1 (program)

    funcDecl    go to state 9
    funcHeader  go to state 6
    retType     go to state 7


State 5

    3 funcDeclList: funcDecl .

    $default  reduce using rule 3 (funcDeclList)


State 6

    4 funcDecl: funcHeader . funcBody

    LBRACE  shift, and go to state 10

    funcBody  go to state 11


State 7

    5 funcHeader: retType . ID LPAREN params RPAREN

    ID  shift, and go to state 12


State 8

    0 $accept: program $end .

    $default  accept


State 9

    2 funcDeclList: funcDeclList funcDecl .

    $default  reduce using rule 2 (funcDeclList)


State 10

    6 funcBody: LBRACE . optVarDecl optStmtList RBRACE

    INT  shift, and go to state 13

    $default  reduce using rule 7 (optVarDecl)

    optVarDecl   go to state 14
    varDeclList  go to state 15
    varDecl      go to state 16


State 11

    4 funcDecl: funcHeader funcBody .

    $default  reduce using rule 4 (funcDecl)


State 12

    5 funcHeader: retType ID . LPAREN params RPAREN

    LPAREN  shift, and go to state 17


State 13

   21 varDecl: INT . ID SEMI
   22        | INT . ID LBRACK NUM RBRACK SEMI

    ID  shift, and go to state 18


State 14

    6 funcBody: LBRACE optVarDecl . optStmtList RBRACE

    IF      shift, and go to state 19
    OUTPUT  shift, and go to state 20
    RETURN  shift, and go to state 21
    WHILE   shift, and go to state 22
    WRITE   shift, and go to state 23
    ID      shift, and go to state 24

    $default  reduce using rule 9 (optStmtList)

    optStmtList   go to state 25
    stmtList      go to state 26
    stmt          go to state 27
    assignStmt    go to state 28
    lval          go to state 29
    ifStmt        go to state 30
    whileStmt     go to state 31
    returnStmt    go to state 32
    funcCall      go to state 33
    outputCall    go to state 34
    writeCall     go to state 35
    userFuncCall  go to state 36


State 15

    8 optVarDecl: varDeclList .
   19 varDeclList: varDeclList . varDecl

    INT  shift, and go to state 13

    $default  reduce using rule 8 (optVarDecl)

    varDecl  go to state 37


State 16

   20 varDeclList: varDecl .

    $default  reduce using rule 20 (varDeclList)


State 17

    5 funcHeader: retType ID LPAREN . params RPAREN

    INT   shift, and go to state 38
    VOID  shift, and go to state 39

    params     go to state 40
    paramList  go to state 41
    param      go to state 42


State 18

   21 varDecl: INT ID . SEMI
   22        | INT ID . LBRACK NUM RBRACK SEMI

    SEMI    shift, and go to state 43
    LBRACK  shift, and go to state 44


State 19

   34 ifStmt: IF . LPAREN boolExpr RPAREN block
   35       | IF . LPAREN boolExpr RPAREN block ELSE block

    LPAREN  shift, and go to state 45


State 20

   44 outputCall: OUTPUT . LPAREN arithExpr RPAREN

    LPAREN  shift, and go to state 46


State 21

   38 returnStmt: RETURN . SEMI
   39           | RETURN . arithExpr SEMI

    INPUT   shift, and go to state 47
    SEMI    shift, and go to state 48
    LPAREN  shift, and go to state 49
    NUM     shift, and go to state 50
    ID      shift, and go to state 24

    lval          go to state 51
    inputCall     go to state 52
    userFuncCall  go to state 53
    arithExpr     go to state 54


State 22

   37 whileStmt: WHILE . LPAREN boolExpr RPAREN block

    LPAREN  shift, and go to state 55


State 23

   45 writeCall: WRITE . LPAREN STRING RPAREN

    LPAREN  shift, and go to state 56


State 24

   31 lval: ID .
   32     | ID . LBRACK NUM RBRACK
   33     | ID . LBRACK ID RBRACK
   46 userFuncCall: ID . LPAREN optArgList RPAREN

    LBRACK  shift, and go to state 57
    LPAREN  shift, and go to state 58

    $default  reduce using rule 31 (lval)


State 25

    6 funcBody: LBRACE optVarDecl optStmtList . RBRACE

    RBRACE  shift, and go to state 59


State 26

   10 optStmtList: stmtList .
   23 stmtList: stmtList . stmt

    IF      shift, and go to state 19
    OUTPUT  shift, and go to state 20
    RETURN  shift, and go to state 21
    WHILE   shift, and go to state 22
    WRITE   shift, and go to state 23
    ID      shift, and go to state 24

    $default  reduce using rule 10 (optStmtList)

    stmt          go to state 60
    assignStmt    go to state 28
    lval          go to state 29
    ifStmt        go to state 30
    whileStmt     go to state 31
    returnStmt    go to state 32
    funcCall      go to state 33
    outputCall    go to state 34
    writeCall     go to state 35
    userFuncCall  go to state 36


State 27

   24 stmtList: stmt .

    $default  reduce using rule 24 (stmtList)


State 28

   25 stmt: assignStmt .

    $default  reduce using rule 25 (stmt)


State 29

   30 assignStmt: lval . ASSIGN arithExpr SEMI

    ASSIGN  shift, and go to state 61


State 30

   26 stmt: ifStmt .

    $default  reduce using rule 26 (stmt)


State 31

   27 stmt: whileStmt .

    $default  reduce using rule 27 (stmt)


State 32

   28 stmt: returnStmt .

    $default  reduce using rule 28 (stmt)


State 33

   29 stmt: funcCall . SEMI

    SEMI  shift, and go to state 62


State 34

   40 funcCall: outputCall .

    $default  reduce using rule 40 (funcCall)


State 35

   41 funcCall: writeCall .

    $default  reduce using rule 41 (funcCall)


State 36

   42 funcCall: userFuncCall .

    $default  reduce using rule 42 (funcCall)


State 37

   19 varDeclList: varDeclList varDecl .

    $default  reduce using rule 19 (varDeclList)


State 38

   17 param: INT . ID
   18      | INT . ID LBRACK RBRACK

    ID  shift, and go to state 63


State 39

   13 params: VOID .

    $default  reduce using rule 13 (params)


State 40

    5 funcHeader: retType ID LPAREN params . RPAREN

    RPAREN  shift, and go to state 64


State 41

   14 params: paramList .
   15 paramList: paramList . COMMA param

    COMMA  shift, and go to state 65

    $default  reduce using rule 14 (params)


State 42

   16 paramList: param .

    $default  reduce using rule 16 (paramList)


State 43

   21 varDecl: INT ID SEMI .

    $default  reduce using rule 21 (varDecl)


State 44

   22 varDecl: INT ID LBRACK . NUM RBRACK SEMI

    NUM  shift, and go to state 66


State 45

   34 ifStmt: IF LPAREN . boolExpr RPAREN block
   35       | IF LPAREN . boolExpr RPAREN block ELSE block

    INPUT   shift, and go to state 47
    LPAREN  shift, and go to state 49
    NUM     shift, and go to state 50
    ID      shift, and go to state 24

    lval          go to state 51
    inputCall     go to state 52
    userFuncCall  go to state 53
    boolExpr      go to state 67
    arithExpr     go to state 68


State 46

   44 outputCall: OUTPUT LPAREN . arithExpr RPAREN

    INPUT   shift, and go to state 47
    LPAREN  shift, and go to state 49
    NUM     shift, and go to state 50
    ID      shift, and go to state 24

    lval          go to state 51
    inputCall     go to state 52
    userFuncCall  go to state 53
    arithExpr     go to state 69


State 47

   43 inputCall: INPUT . LPAREN RPAREN

    LPAREN  shift, and go to state 70


State 48

   38 returnStmt: RETURN SEMI .

    $default  reduce using rule 38 (returnStmt)


State 49

   61 arithExpr: LPAREN . arithExpr RPAREN

    INPUT   shift, and go to state 47
    LPAREN  shift, and go to state 49
    NUM     shift, and go to state 50
    ID      shift, and go to state 24

    lval          go to state 51
    inputCall     go to state 52
    userFuncCall  go to state 53
    arithExpr     go to state 71


State 50

   65 arithExpr: NUM .

    $default  reduce using rule 65 (arithExpr)


State 51

   62 arithExpr: lval .

    $default  reduce using rule 62 (arithExpr)


State 52

   63 arithExpr: inputCall .

    $default  reduce using rule 63 (arithExpr)


State 53

   64 arithExpr: userFuncCall .

    $default  reduce using rule 64 (arithExpr)


State 54

   39 returnStmt: RETURN arithExpr . SEMI
   57 arithExpr: arithExpr . PLUS arithExpr
   58          | arithExpr . MINUS arithExpr
   59          | arithExpr . TIMES arithExpr
   60          | arithExpr . OVER arithExpr

    SEMI   shift, and go to state 72
    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74
    TIMES  shift, and go to state 75
    OVER   shift, and go to state 76


State 55

   37 whileStmt: WHILE LPAREN . boolExpr RPAREN block

    INPUT   shift, and go to state 47
    LPAREN  shift, and go to state 49
    NUM     shift, and go to state 50
    ID      shift, and go to state 24

    lval          go to state 51
    inputCall     go to state 52
    userFuncCall  go to state 53
    boolExpr      go to state 77
    arithExpr     go to state 68


State 56

   45 writeCall: WRITE LPAREN . STRING RPAREN

    STRING  shift, and go to state 78


State 57

   32 lval: ID LBRACK . NUM RBRACK
   33     | ID LBRACK . ID RBRACK

    NUM  shift, and go to state 79
    ID   shift, and go to state 80


State 58

   46 userFuncCall: ID LPAREN . optArgList RPAREN

    INPUT   shift, and go to state 47
    LPAREN  shift, and go to state 49
    NUM     shift, and go to state 50
    ID      shift, and go to state 24

    $default  reduce using rule 47 (optArgList)

    lval          go to state 51
    inputCall     go to state 52
    userFuncCall  go to state 53
    optArgList    go to state 81
    argList       go to state 82
    arithExpr     go to state 83


State 59

    6 funcBody: LBRACE optVarDecl optStmtList RBRACE .

    $default  reduce using rule 6 (funcBody)


State 60

   23 stmtList: stmtList stmt .

    $default  reduce using rule 23 (stmtList)


State 61

   30 assignStmt: lval ASSIGN . arithExpr SEMI

    INPUT   shift, and go to state 47
    LPAREN  shift, and go to state 49
    NUM     shift, and go to state 50
    ID      shift, and go to state 24

    lval          go to state 51
    inputCall     go to state 52
    userFuncCall  go to state 53
    arithExpr     go to state 84


State 62

   29 stmt: funcCall SEMI .

    $default  reduce using rule 29 (stmt)


State 63

   17 param: INT ID .
   18      | INT ID . LBRACK RBRACK

    LBRACK  shift, and go to state 85

    $default  reduce using rule 17 (param)


State 64

    5 funcHeader: retType ID LPAREN params RPAREN .

    $default  reduce using rule 5 (funcHeader)


State 65

   15 paramList: paramList COMMA . param

    INT  shift, and go to state 38

    param  go to state 86


State 66

   22 varDecl: INT ID LBRACK NUM . RBRACK SEMI

    RBRACK  shift, and go to state 87


State 67

   34 ifStmt: IF LPAREN boolExpr . RPAREN block
   35       | IF LPAREN boolExpr . RPAREN block ELSE block

    RPAREN  shift, and go to state 88


State 68

   51 boolExpr: arithExpr . LT arithExpr
   52         | arithExpr . LE arithExpr
   53         | arithExpr . GT arithExpr
   54         | arithExpr . GE arithExpr
   55         | arithExpr . EQ arithExpr
   56         | arithExpr . NEQ arithExpr
   57 arithExpr: arithExpr . PLUS arithExpr
   58          | arithExpr . MINUS arithExpr
   59          | arithExpr . TIMES arithExpr
   60          | arithExpr . OVER arithExpr

    LT     shift, and go to state 89
    LE     shift, and go to state 90
    GT     shift, and go to state 91
    GE     shift, and go to state 92
    EQ     shift, and go to state 93
    NEQ    shift, and go to state 94
    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74
    TIMES  shift, and go to state 75
    OVER   shift, and go to state 76


State 69

   44 outputCall: OUTPUT LPAREN arithExpr . RPAREN
   57 arithExpr: arithExpr . PLUS arithExpr
   58          | arithExpr . MINUS arithExpr
   59          | arithExpr . TIMES arithExpr
   60          | arithExpr . OVER arithExpr

    RPAREN  shift, and go to state 95
    PLUS    shift, and go to state 73
    MINUS   shift, and go to state 74
    TIMES   shift, and go to state 75
    OVER    shift, and go to state 76


State 70

   43 inputCall: INPUT LPAREN . RPAREN

    RPAREN  shift, and go to state 96


State 71

   57 arithExpr: arithExpr . PLUS arithExpr
   58          | arithExpr . MINUS arithExpr
   59          | arithExpr . TIMES arithExpr
   60          | arithExpr . OVER arithExpr
   61          | LPAREN arithExpr . RPAREN

    RPAREN  shift, and go to state 97
    PLUS    shift, and go to state 73
    MINUS   shift, and go to state 74
    TIMES   shift, and go to state 75
    OVER    shift, and go to state 76


State 72

   39 returnStmt: RETURN arithExpr SEMI .

    $default  reduce using rule 39 (returnStmt)


State 73

   57 arithExpr: arithExpr PLUS . arithExpr

    INPUT   shift, and go to state 47
    LPAREN  shift, and go to state 49
    NUM     shift, and go to state 50
    ID      shift, and go to state 24

    lval          go to state 51
    inputCall     go to state 52
    userFuncCall  go to state 53
    arithExpr     go to state 98


State 74

   58 arithExpr: arithExpr MINUS . arithExpr

    INPUT   shift, and go to state 47
    LPAREN  shift, and go to state 49
    NUM     shift, and go to state 50
    ID      shift, and go to state 24

    lval          go to state 51
    inputCall     go to state 52
    userFuncCall  go to state 53
    arithExpr     go to state 99


State 75

   59 arithExpr: arithExpr TIMES . arithExpr

    INPUT   shift, and go to state 47
    LPAREN  shift, and go to state 49
    NUM     shift, and go to state 50
    ID      shift, and go to state 24

    lval          go to state 51
    inputCall     go to state 52
    userFuncCall  go to state 53
    arithExpr     go to state 100


State 76

   60 arithExpr: arithExpr OVER . arithExpr

    INPUT   shift, and go to state 47
    LPAREN  shift, and go to state 49
    NUM     shift, and go to state 50
    ID      shift, and go to state 24

    lval          go to state 51
    inputCall     go to state 52
    userFuncCall  go to state 53
    arithExpr     go to state 101


State 77

   37 whileStmt: WHILE LPAREN boolExpr . RPAREN block

    RPAREN  shift, and go to state 102


State 78

   45 writeCall: WRITE LPAREN STRING . RPAREN

    RPAREN  shift, and go to state 103


State 79

   32 lval: ID LBRACK NUM . RBRACK

    RBRACK  shift, and go to state 104


State 80

   33 lval: ID LBRACK ID . RBRACK

    RBRACK  shift, and go to state 105


State 81

   46 userFuncCall: ID LPAREN optArgList . RPAREN

    RPAREN  shift, and go to state 106


State 82

   48 optArgList: argList .
   49 argList: argList . COMMA arithExpr

    COMMA  shift, and go to state 107

    $default  reduce using rule 48 (optArgList)


State 83

   50 argList: arithExpr .
   57 arithExpr: arithExpr . PLUS arithExpr
   58          | arithExpr . MINUS arithExpr
   59          | arithExpr . TIMES arithExpr
   60          | arithExpr . OVER arithExpr

    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74
    TIMES  shift, and go to state 75
    OVER   shift, and go to state 76

    $default  reduce using rule 50 (argList)


State 84

   30 assignStmt: lval ASSIGN arithExpr . SEMI
   57 arithExpr: arithExpr . PLUS arithExpr
   58          | arithExpr . MINUS arithExpr
   59          | arithExpr . TIMES arithExpr
   60          | arithExpr . OVER arithExpr

    SEMI   shift, and go to state 108
    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74
    TIMES  shift, and go to state 75
    OVER   shift, and go to state 76


State 85

   18 param: INT ID LBRACK . RBRACK

    RBRACK  shift, and go to state 109


State 86

   15 paramList: paramList COMMA param .

    $default  reduce using rule 15 (paramList)


State 87

   22 varDecl: INT ID LBRACK NUM RBRACK . SEMI

    SEMI  shift, and go to state 110


State 88

   34 ifStmt: IF LPAREN boolExpr RPAREN . block
   35       | IF LPAREN boolExpr RPAREN . block ELSE block

    LBRACE  shift, and go to state 111

    block  go to state 112


State 89

   51 boolExpr: arithExpr LT . arithExpr

    INPUT   shift, and go to state 47
    LPAREN  shift, and go to state 49
    NUM     shift, and go to state 50
    ID      shift, and go to state 24

    lval          go to state 51
    inputCall     go to state 52
    userFuncCall  go to state 53
    arithExpr     go to state 113


State 90

   52 boolExpr: arithExpr LE . arithExpr

    INPUT   shift, and go to state 47
    LPAREN  shift, and go to state 49
    NUM     shift, and go to state 50
    ID      shift, and go to state 24

    lval          go to state 51
    inputCall     go to state 52
    userFuncCall  go to state 53
    arithExpr     go to state 114


State 91

   53 boolExpr: arithExpr GT . arithExpr

    INPUT   shift, and go to state 47
    LPAREN  shift, and go to state 49
    NUM     shift, and go to state 50
    ID      shift, and go to state 24

    lval          go to state 51
    inputCall     go to state 52
    userFuncCall  go to state 53
    arithExpr     go to state 115


State 92

   54 boolExpr: arithExpr GE . arithExpr

    INPUT   shift, and go to state 47
    LPAREN  shift, and go to state 49
    NUM     shift, and go to state 50
    ID      shift, and go to state 24

    lval          go to state 51
    inputCall     go to state 52
    userFuncCall  go to state 53
    arithExpr     go to state 116


State 93

   55 boolExpr: arithExpr EQ . arithExpr

    INPUT   shift, and go to state 47
    LPAREN  shift, and go to state 49
    NUM     shift, and go to state 50
    ID      shift, and go to state 24

    lval          go to state 51
    inputCall     go to state 52
    userFuncCall  go to state 53
    arithExpr     go to state 117


State 94

   56 boolExpr: arithExpr NEQ . arithExpr

    INPUT   shift, and go to state 47
    LPAREN  shift, and go to state 49
    NUM     shift, and go to state 50
    ID      shift, and go to state 24

    lval          go to state 51
    inputCall     go to state 52
    userFuncCall  go to state 53
    arithExpr     go to state 118


State 95

   44 outputCall: OUTPUT LPAREN arithExpr RPAREN .

    $default  reduce using rule 44 (outputCall)


State 96

   43 inputCall: INPUT LPAREN RPAREN .

    $default  reduce using rule 43 (inputCall)


State 97

   61 arithExpr: LPAREN arithExpr RPAREN .

    $default  reduce using rule 61 (arithExpr)


State 98

   57 arithExpr: arithExpr . PLUS arithExpr
   57          | arithExpr PLUS arithExpr .
   58          | arithExpr . MINUS arithExpr
   59          | arithExpr . TIMES arithExpr
   60          | arithExpr . OVER arithExpr

    TIMES  shift, and go to state 75
    OVER   shift, and go to state 76

    $default  reduce using rule 57 (arithExpr)


State 99

   57 arithExpr: arithExpr . PLUS arithExpr
   58          | arithExpr . MINUS arithExpr
   58          | arithExpr MINUS arithExpr .
   59          | arithExpr . TIMES arithExpr
   60          | arithExpr . OVER arithExpr

    TIMES  shift, and go to state 75
    OVER   shift, and go to state 76

    $default  reduce using rule 58 (arithExpr)


State 100

   57 arithExpr: arithExpr . PLUS arithExpr
   58          | arithExpr . MINUS arithExpr
   59          | arithExpr . TIMES arithExpr
   59          | arithExpr TIMES arithExpr .
   60          | arithExpr . OVER arithExpr

    $default  reduce using rule 59 (arithExpr)


State 101

   57 arithExpr: arithExpr . PLUS arithExpr
   58          | arithExpr . MINUS arithExpr
   59          | arithExpr . TIMES arithExpr
   60          | arithExpr . OVER arithExpr
   60          | arithExpr OVER arithExpr .

    $default  reduce using rule 60 (arithExpr)


State 102

   37 whileStmt: WHILE LPAREN boolExpr RPAREN . block

    LBRACE  shift, and go to state 111

    block  go to state 119


State 103

   45 writeCall: WRITE LPAREN STRING RPAREN .

    $default  reduce using rule 45 (writeCall)


State 104

   32 lval: ID LBRACK NUM RBRACK .

    $default  reduce using rule 32 (lval)


State 105

   33 lval: ID LBRACK ID RBRACK .

    $default  reduce using rule 33 (lval)


State 106

   46 userFuncCall: ID LPAREN optArgList RPAREN .

    $default  reduce using rule 46 (userFuncCall)


State 107

   49 argList: argList COMMA . arithExpr

    INPUT   shift, and go to state 47
    LPAREN  shift, and go to state 49
    NUM     shift, and go to state 50
    ID      shift, and go to state 24

    lval          go to state 51
    inputCall     go to state 52
    userFuncCall  go to state 53
    arithExpr     go to state 120


State 108

   30 assignStmt: lval ASSIGN arithExpr SEMI .

    $default  reduce using rule 30 (assignStmt)


State 109

   18 param: INT ID LBRACK RBRACK .

    $default  reduce using rule 18 (param)


State 110

   22 varDecl: INT ID LBRACK NUM RBRACK SEMI .

    $default  reduce using rule 22 (varDecl)


State 111

   36 block: LBRACE . optStmtList RBRACE

    IF      shift, and go to state 19
    OUTPUT  shift, and go to state 20
    RETURN  shift, and go to state 21
    WHILE   shift, and go to state 22
    WRITE   shift, and go to state 23
    ID      shift, and go to state 24

    $default  reduce using rule 9 (optStmtList)

    optStmtList   go to state 121
    stmtList      go to state 26
    stmt          go to state 27
    assignStmt    go to state 28
    lval          go to state 29
    ifStmt        go to state 30
    whileStmt     go to state 31
    returnStmt    go to state 32
    funcCall      go to state 33
    outputCall    go to state 34
    writeCall     go to state 35
    userFuncCall  go to state 36


State 112

   34 ifStmt: IF LPAREN boolExpr RPAREN block .
   35       | IF LPAREN boolExpr RPAREN block . ELSE block

    ELSE  shift, and go to state 122

    $default  reduce using rule 34 (ifStmt)


State 113

   51 boolExpr: arithExpr LT arithExpr .
   57 arithExpr: arithExpr . PLUS arithExpr
   58          | arithExpr . MINUS arithExpr
   59          | arithExpr . TIMES arithExpr
   60          | arithExpr . OVER arithExpr

    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74
    TIMES  shift, and go to state 75
    OVER   shift, and go to state 76

    $default  reduce using rule 51 (boolExpr)


State 114

   52 boolExpr: arithExpr LE arithExpr .
   57 arithExpr: arithExpr . PLUS arithExpr
   58          | arithExpr . MINUS arithExpr
   59          | arithExpr . TIMES arithExpr
   60          | arithExpr . OVER arithExpr

    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74
    TIMES  shift, and go to state 75
    OVER   shift, and go to state 76

    $default  reduce using rule 52 (boolExpr)


State 115

   53 boolExpr: arithExpr GT arithExpr .
   57 arithExpr: arithExpr . PLUS arithExpr
   58          | arithExpr . MINUS arithExpr
   59          | arithExpr . TIMES arithExpr
   60          | arithExpr . OVER arithExpr

    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74
    TIMES  shift, and go to state 75
    OVER   shift, and go to state 76

    $default  reduce using rule 53 (boolExpr)


State 116

   54 boolExpr: arithExpr GE arithExpr .
   57 arithExpr: arithExpr . PLUS arithExpr
   58          | arithExpr . MINUS arithExpr
   59          | arithExpr . TIMES arithExpr
   60          | arithExpr . OVER arithExpr

    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74
    TIMES  shift, and go to state 75
    OVER   shift, and go to state 76

    $default  reduce using rule 54 (boolExpr)


State 117

   55 boolExpr: arithExpr EQ arithExpr .
   57 arithExpr: arithExpr . PLUS arithExpr
   58          | arithExpr . MINUS arithExpr
   59          | arithExpr . TIMES arithExpr
   60          | arithExpr . OVER arithExpr

    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74
    TIMES  shift, and go to state 75
    OVER   shift, and go to state 76

    $default  reduce using rule 55 (boolExpr)


State 118

   56 boolExpr: arithExpr NEQ arithExpr .
   57 arithExpr: arithExpr . PLUS arithExpr
   58          | arithExpr . MINUS arithExpr
   59          | arithExpr . TIMES arithExpr
   60          | arithExpr . OVER arithExpr

    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74
    TIMES  shift, and go to state 75
    OVER   shift, and go to state 76

    $default  reduce using rule 56 (boolExpr)


State 119

   37 whileStmt: WHILE LPAREN boolExpr RPAREN block .

    $default  reduce using rule 37 (whileStmt)


State 120

   49 argList: argList COMMA arithExpr .
   57 arithExpr: arithExpr . PLUS arithExpr
   58          | arithExpr . MINUS arithExpr
   59          | arithExpr . TIMES arithExpr
   60          | arithExpr . OVER arithExpr

    PLUS   shift, and go to state 73
    MINUS  shift, and go to state 74
    TIMES  shift, and go to state 75
    OVER   shift, and go to state 76

    $default  reduce using rule 49 (argList)


State 121

   36 block: LBRACE optStmtList . RBRACE

    RBRACE  shift, and go to state 123


State 122

   35 ifStmt: IF LPAREN boolExpr RPAREN block ELSE . block

    LBRACE  shift, and go to state 111

    block  go to state 124


State 123

   36 block: LBRACE optStmtList RBRACE .

    $default  reduce using rule 36 (block)


State 124

   35 ifStmt: IF LPAREN boolExpr RPAREN block ELSE block .

    $default  reduce using rule 35 (ifStmt)
